// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: protos/twopc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TwoPCService_Create2PhaseCommit_FullMethodName       = "/spqr.TwoPCService/Create2PhaseCommit"
	TwoPCService_CreateLease_FullMethodName              = "/spqr.TwoPCService/CreateLease"
	TwoPCService_Update2PhaseCommitStatus_FullMethodName = "/spqr.TwoPCService/Update2PhaseCommitStatus"
	TwoPCService_Finish2PhaseCommit_FullMethodName       = "/spqr.TwoPCService/Finish2PhaseCommit"
)

// TwoPCServiceClient is the client API for TwoPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoPCServiceClient interface {
	Create2PhaseCommit(ctx context.Context, in *TwoPCRequest, opts ...grpc.CallOption) (*TwoPCReply, error)
	CreateLease(ctx context.Context, in *TwoPCRequest, opts ...grpc.CallOption) (*TwoPCReply, error)
	Update2PhaseCommitStatus(ctx context.Context, in *TwoPCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Finish2PhaseCommit(ctx context.Context, in *TwoPCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type twoPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoPCServiceClient(cc grpc.ClientConnInterface) TwoPCServiceClient {
	return &twoPCServiceClient{cc}
}

func (c *twoPCServiceClient) Create2PhaseCommit(ctx context.Context, in *TwoPCRequest, opts ...grpc.CallOption) (*TwoPCReply, error) {
	out := new(TwoPCReply)
	err := c.cc.Invoke(ctx, TwoPCService_Create2PhaseCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPCServiceClient) CreateLease(ctx context.Context, in *TwoPCRequest, opts ...grpc.CallOption) (*TwoPCReply, error) {
	out := new(TwoPCReply)
	err := c.cc.Invoke(ctx, TwoPCService_CreateLease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPCServiceClient) Update2PhaseCommitStatus(ctx context.Context, in *TwoPCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TwoPCService_Update2PhaseCommitStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPCServiceClient) Finish2PhaseCommit(ctx context.Context, in *TwoPCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TwoPCService_Finish2PhaseCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoPCServiceServer is the server API for TwoPCService service.
// All implementations must embed UnimplementedTwoPCServiceServer
// for forward compatibility
type TwoPCServiceServer interface {
	Create2PhaseCommit(context.Context, *TwoPCRequest) (*TwoPCReply, error)
	CreateLease(context.Context, *TwoPCRequest) (*TwoPCReply, error)
	Update2PhaseCommitStatus(context.Context, *TwoPCRequest) (*emptypb.Empty, error)
	Finish2PhaseCommit(context.Context, *TwoPCRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTwoPCServiceServer()
}

// UnimplementedTwoPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTwoPCServiceServer struct {
}

func (UnimplementedTwoPCServiceServer) Create2PhaseCommit(context.Context, *TwoPCRequest) (*TwoPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create2PhaseCommit not implemented")
}
func (UnimplementedTwoPCServiceServer) CreateLease(context.Context, *TwoPCRequest) (*TwoPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLease not implemented")
}
func (UnimplementedTwoPCServiceServer) Update2PhaseCommitStatus(context.Context, *TwoPCRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update2PhaseCommitStatus not implemented")
}
func (UnimplementedTwoPCServiceServer) Finish2PhaseCommit(context.Context, *TwoPCRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finish2PhaseCommit not implemented")
}
func (UnimplementedTwoPCServiceServer) mustEmbedUnimplementedTwoPCServiceServer() {}

// UnsafeTwoPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoPCServiceServer will
// result in compilation errors.
type UnsafeTwoPCServiceServer interface {
	mustEmbedUnimplementedTwoPCServiceServer()
}

func RegisterTwoPCServiceServer(s grpc.ServiceRegistrar, srv TwoPCServiceServer) {
	s.RegisterService(&TwoPCService_ServiceDesc, srv)
}

func _TwoPCService_Create2PhaseCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPCServiceServer).Create2PhaseCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoPCService_Create2PhaseCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPCServiceServer).Create2PhaseCommit(ctx, req.(*TwoPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPCService_CreateLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPCServiceServer).CreateLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoPCService_CreateLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPCServiceServer).CreateLease(ctx, req.(*TwoPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPCService_Update2PhaseCommitStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPCServiceServer).Update2PhaseCommitStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoPCService_Update2PhaseCommitStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPCServiceServer).Update2PhaseCommitStatus(ctx, req.(*TwoPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPCService_Finish2PhaseCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPCServiceServer).Finish2PhaseCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoPCService_Finish2PhaseCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPCServiceServer).Finish2PhaseCommit(ctx, req.(*TwoPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwoPCService_ServiceDesc is the grpc.ServiceDesc for TwoPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spqr.TwoPCService",
	HandlerType: (*TwoPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create2PhaseCommit",
			Handler:    _TwoPCService_Create2PhaseCommit_Handler,
		},
		{
			MethodName: "CreateLease",
			Handler:    _TwoPCService_CreateLease_Handler,
		},
		{
			MethodName: "Update2PhaseCommitStatus",
			Handler:    _TwoPCService_Update2PhaseCommitStatus_Handler,
		},
		{
			MethodName: "Finish2PhaseCommit",
			Handler:    _TwoPCService_Finish2PhaseCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/twopc.proto",
}
